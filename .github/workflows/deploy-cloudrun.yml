name: Deploy to Cloud Run

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

env:
  PROJECT_ID: fourth-dynamo-423103-q2
  REGION: asia-northeast1
  BACKEND_SERVICE: werewolf-backend
  FRONTEND_SERVICE: werewolf-frontend

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd backend
        pip install -r game_logic/requirements.txt
        pip install -r requirements-dev.txt

    - name: Run backend tests
      run: |
        cd backend
        pytest --cov=game_logic tests/

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true

    - name: Configure Docker to use gcloud as credential helper
      run: |
        gcloud auth configure-docker

    - name: Set environment variables
      run: |
        echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Submit build to Cloud Build
      run: |
        gcloud builds submit \
          --config=cloudbuild.yaml \
          --substitutions=COMMIT_SHA=${{ env.SHORT_SHA }}

    - name: Get service URLs
      id: get-urls
      run: |
        BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} \
          --region=${{ env.REGION }} \
          --format='value(status.url)')
        FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }} \
          --region=${{ env.REGION }} \
          --format='value(status.url)')
        
        echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT
        echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT

    - name: Update frontend with backend URL
      run: |
        # フロントエンドサービスを更新してバックエンドURLを設定
        gcloud run services update ${{ env.FRONTEND_SERVICE }} \
          --region=${{ env.REGION }} \
          --set-env-vars="BACKEND_URL=${{ steps.get-urls.outputs.backend-url }}"

    - name: Post deployment summary
      run: |
        echo "## Deployment Summary 🚀" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Backend Service**: ${{ steps.get-urls.outputs.backend-url }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Frontend Service**: ${{ steps.get-urls.outputs.frontend-url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [API Documentation](${{ steps.get-urls.outputs.backend-url }}/docs)" >> $GITHUB_STEP_SUMMARY
        echo "- [Health Check](${{ steps.get-urls.outputs.backend-url }}/health)" >> $GITHUB_STEP_SUMMARY
        echo "- [Frontend App](${{ steps.get-urls.outputs.frontend-url }})" >> $GITHUB_STEP_SUMMARY

    - name: Run health checks
      run: |
        echo "Running health checks..."
        
        # バックエンドヘルスチェック
        timeout 60 bash -c 'until curl -f ${{ steps.get-urls.outputs.backend-url }}/health; do sleep 5; done'
        echo "✅ Backend health check passed"
        
        # フロントエンドヘルスチェック  
        timeout 60 bash -c 'until curl -f ${{ steps.get-urls.outputs.frontend-url }}/health; do sleep 5; done'
        echo "✅ Frontend health check passed"

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.event_name == 'push'
    
    steps:
    - name: Notify success
      if: needs.deploy.result == 'success'
      run: |
        echo "🎉 Deployment successful!"
        echo "Backend: https://werewolf-backend-*-an.a.run.app"
        echo "Frontend: https://werewolf-frontend-*-an.a.run.app"

    - name: Notify failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "Please check the logs for details."