# Cloud Run最適化Dockerfile - フロントエンド

# Build stage
FROM node:18-alpine AS builder

WORKDIR /app

# package.jsonとpackage-lock.jsonをコピー
COPY package*.json ./

# 依存関係をインストール（開発依存関係も含む）
# package-lock.jsonがない場合はnpm installを使用（peer依存関係の競合を回避）
RUN if [ -f package-lock.json ]; then npm ci --legacy-peer-deps; else npm install --legacy-peer-deps; fi

# ソースコードをコピー
COPY . .

# ビルド時の環境変数
ARG VITE_API_BASE_URL
ENV VITE_API_BASE_URL=${VITE_API_BASE_URL}

# アプリケーションをビルド
RUN npm run build

# Production stage - Cloud Run最適化
FROM nginx:alpine

# Cloud Run向けnginx設定
COPY nginx.cloudrun.conf /etc/nginx/conf.d/default.conf

# ビルドされたアプリケーションをコピー
COPY --from=builder /app/dist /usr/share/nginx/html

# Cloud Runのポート設定（環境変数から取得）
ENV PORT=8080

# nginx設定でポートを動的に変更するスクリプト
RUN echo '#!/bin/sh\n\
sed -i "s/listen 80;/listen $PORT;/g" /etc/nginx/conf.d/default.conf\n\
exec nginx -g "daemon off;"' > /start.sh && \
chmod +x /start.sh

# 非rootユーザーで実行するための設定
RUN touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d && \
    chown -R nginx:nginx /usr/share/nginx/html

USER nginx

# ポートを公開
EXPOSE ${PORT}

# ヘルスチェック
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT}/ || exit 1

# 起動スクリプトを実行
CMD ["/start.sh"]